// src/types/index.ts - Types √©tendus pour r√©soudre toutes les erreurs

// üîÑ Interface Quote √©tendue - maintenant coh√©rente avec la DB
export interface Quote {
  id: string;
  text: string;
  category: string;
  isFavorite: boolean;
  createdAt: string;         // ‚úÖ Maintenant coh√©rent avec la DB
  source?: string;           // Source de la citation (pour les quotes normales)
  user_id?: string;          // ID de l'utilisateur (pour les quotes stock√©es en DB)
  
  // Nouvelles propri√©t√©s pour les favoris de livre
  isBookEntry?: boolean;     // Indique si c'est un favori de livre
  originalEntryId?: number;  // ID original de l'entr√©e dans le livre
  bookTitle?: string;        // Titre du livre source
  ordre?: number;            // Ordre/position dans le livre
  
  // Propri√©t√©s pour les notifications et autres fonctionnalit√©s
  scheduledDate?: string;    // Date programm√©e pour les notifications
  scheduled_date?: string;   // Version snake_case pour compatibilit√© DB
  theme?: string;            // Th√®me associ√© √† la quote
  is_favorite?: boolean;     // Version snake_case alternative pour isFavorite
}

// Interface pour les cat√©gories
export interface Category {
  id: string;
  name: string;
  icon?: string;
  isDefault?: boolean;
}

// Interface pour les favoris de livre - mise √† jour
export interface BookFavorite {
  id: string;
  entry_id: number;
  book_title: string;
  user_id: string;
  createdAt: string;         // ‚úÖ Maintenant coh√©rent avec la DB
  content?: string;          // Contenu de l'entr√©e
  ordre?: number;            // Ordre de l'entr√©e
  book_entries?: {           // Relation avec la table book_entries
    content: string;
    ordre: number;
  };
}

// Interface pour les entr√©es de livre - √âTENDUE
export interface BookEntry {
  id: number | string;       // ‚úÖ Accepte string ou number pour compatibilit√©
  content: string;
  ordre: number;
  book_title: string;
  createdAt?: string;        // ‚úÖ Ajout√© pour compatibilit√©
  isFavorite?: boolean;      // ‚úÖ Ajout√© pour compatibilit√©
  category?: string;         // ‚úÖ Ajout√© pour compatibilit√©
  
  // Propri√©t√©s suppl√©mentaires pour les pages
  chapter_title?: string;    // ‚úÖ Titre du chapitre
  page_number?: number;      // ‚úÖ Num√©ro de page
}

// Type pour distinguer les sources de favoris - CORRIG√â
export type FavoriteSource = 'quote' | 'book-entry'; // ‚úÖ Tiret au lieu de underscore
export type ContentType = FavoriteSource; // ‚úÖ Alias pour compatibilit√©

// Interface pour les props du viewer unifi√©
export interface UnifiedQuoteViewerProps {
  quotes: Quote[];
  currentIndex: number;
  onIndexChange: (index: number) => void;
  selectedCategory: string;
  onToggleFavorite: (id: string) => void;
  onEdit?: (quote: Quote) => void;
  onDelete?: (id: string) => void;
  onNavigateToBook?: (bookTitle: string, ordre: number) => void;
}

// Interface pour le contexte des favoris - MISE √Ä JOUR
export interface FavoritesContextType {
  favorites: BookFavorite[];
  isLoading: boolean;
  error: string | null;
  addFavorite: (entryId: number, bookTitle: string) => Promise<boolean>;
  removeFavorite: (favoriteId: string) => Promise<boolean>;
  isFavorite: (entryId: number) => boolean;
  getFavoriteId: (entryId: number) => string | null;
  refreshFavorites: () => Promise<void>;
  clearError: () => void;
  
  // Propri√©t√©s suppl√©mentaires pour compatibilit√© avec les pages
  quotes?: Quote[];          // ‚úÖ Pour FavoritesPage
  bookEntries?: BookEntry[]; // ‚úÖ Pour FavoritesPage
}

// Interface pour les r√©sultats des favoris
export interface FavoritesResult {
  quotes: Quote[];
  bookEntries: BookEntry[];
}

// Interface Theme pour les th√®mes - CORRIG√âE
export interface Theme {
  id: string;
  name: string;
  primary: string;           // ‚úÖ Propri√©t√© primary requise
  colors: {
    primary: string;
    secondary: string;
    background: string;
    text: string;
  };
  isDark: boolean;
}

// Types pour les notifications - √âTENDUS
declare global {
  interface NotificationOptions {
    vibrate?: number[] | number; // ‚úÖ Propri√©t√© vibrate ajout√©e
    actions?: NotificationAction[];
    data?: any;
    dir?: NotificationDirection;
    image?: string;
    lang?: string;
    sticky?: boolean;
  }

  interface NotificationAction {
    action: string;
    title: string;
    icon?: string;
  }


}

// Types pour les services - NOUVEAUX
export interface ServiceResult<T> {
  success: boolean;
  data?: T;
  error?: string;
  isFavorite?: boolean; // ‚úÖ Pour useFavorites
}

// Interface pour les props de FavoriteButton - CORRIG√âE
export interface FavoriteButtonProps {
  contentId: string;         // ‚úÖ Toujours string
  contentType: ContentType;  // ‚úÖ Utilise le bon type
  initialIsFavorite?: boolean;
  onToggle?: (isFavorite: boolean) => void;
}

// Types pour la recherche vocale (r√©export√©s)
export * from './speech-recognition-extended';

// Export de types utilitaires
export type ItemType = Quote | BookEntry;
export type ItemWithType = {
  type: 'quote' | 'book-entry';
  item: ItemType;
};

// Export vide pour que ce fichier soit trait√© comme un module
export {};